using Unity.Collections;using Unity.Networking.Transport;using Unity.Entities;using Unity.Burst;public partial struct cmpt : IAutoSerialized // auto-generated{    public const int type_hash = 258093858;    public void unpack(NativeList<byte> buffer, ref int offset, Allocator alloc)    {        Bursted.ud_struct_partial(buffer, ref this, 8, ref offset);        Bursted.ud_na(buffer, out na, ref offset, alloc);        Bursted.ud_na(buffer, out nl_floats, ref offset, alloc);    }}public partial struct cmpt0 : IAutoSerialized // auto-generated{    public const int type_hash = 445649330;    public void unpack(NativeList<byte> buffer, ref int offset, Allocator alloc)    {        Bursted.ud_struct_partial(buffer, ref this, 4, ref offset);        Bursted.ud_na(buffer, out na, ref offset, alloc);        Bursted.ud_na(buffer, out nl_floats, ref offset, alloc);    }}public partial struct cmpt2 : IAutoSerialized // auto-generated{    public const int type_hash = 445649328;    public void unpack(NativeList<byte> buffer, ref int offset, Allocator alloc)    {        Bursted.ud_struct_partial(buffer, ref this, 5, ref offset);        Bursted.ud_na(buffer, out na, ref offset, alloc);    }}public partial struct cmpt : IAutoSerialized // auto-generated{    public NativeList<byte> pack(Allocator alloc)    {        NativeList<byte> buffer = new NativeList<byte>(32, alloc);        Bursted.us_struct(buffer, type_hash);        Bursted.us_struct_partial(buffer, ref this, 8);        Bursted.us_na(buffer, na);        Bursted.us_na(buffer, nl_floats);        return buffer;    }    unsafe public void send(NetworkConnection target, NetworkPipeline pipe, NetworkDriver driver)    {        NativeList<byte> bytes = pack(Allocator.Temp);        driver.BeginSend(pipe, target, out var writer);        writer.WriteBytes(bytes.AsArray());        driver.EndSend(writer);    }}public partial struct cmpt0 : IAutoSerialized // auto-generated{    public NativeList<byte> pack(Allocator alloc)    {        NativeList<byte> buffer = new NativeList<byte>(32, alloc);        Bursted.us_struct(buffer, type_hash);        Bursted.us_struct_partial(buffer, ref this, 4);        Bursted.us_na(buffer, na);        Bursted.us_na(buffer, nl_floats);        return buffer;    }    unsafe public void send(NetworkConnection target, NetworkPipeline pipe, NetworkDriver driver)    {        NativeList<byte> bytes = pack(Allocator.Temp);        driver.BeginSend(pipe, target, out var writer);        writer.WriteBytes(bytes.AsArray());        driver.EndSend(writer);    }}public partial struct cmpt2 : IAutoSerialized // auto-generated{    public NativeList<byte> pack(Allocator alloc)    {        NativeList<byte> buffer = new NativeList<byte>(32, alloc);        Bursted.us_struct(buffer, type_hash);        Bursted.us_struct_partial(buffer, ref this, 5);        Bursted.us_na(buffer, na);        return buffer;    }    unsafe public void send(NetworkConnection target, NetworkPipeline pipe, NetworkDriver driver)    {        NativeList<byte> bytes = pack(Allocator.Temp);        driver.BeginSend(pipe, target, out var writer);        writer.WriteBytes(bytes.AsArray());        driver.EndSend(writer);    }}[BurstCompile]public partial class ServerRPCs // auto-generated{    [BurstCompile]    public static void switcher(int type_hash, ref int offset, ref NetworkConnection sender, ref NativeList<byte> buffer, ref ServerMainSystem ctx, ref SystemState sstate)    {        switch (type_hash)        {            case cmpt.type_hash:                {                    cmpt _data = default;                    _data.unpack(buffer, ref offset, Allocator.Temp);                    _data.callback(sender, ref ctx, ref sstate);                }                break;            case cmpt2.type_hash:                {                    cmpt2 _data = default;                    _data.unpack(buffer, ref offset, Allocator.Temp);                    _data.callback(sender, ref ctx, ref sstate);                }                break;        }    }}[BurstCompile]public partial class ClientRPCs // auto-generated{    [BurstCompile]    public static void switcher(int type_hash, ref int offset, ref NetworkConnection sender, ref NativeList<byte> buffer, ref ClientMainSystem ctx, ref SystemState sstate)    {        switch (type_hash)        {            case cmpt0.type_hash:                {                    cmpt0 _data = default;                    _data.unpack(buffer, ref offset, Allocator.Temp);                    _data.callback(sender, ref ctx, ref sstate);                }                break;        }    }}